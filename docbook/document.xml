<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE booko PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                         'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'  [

<!ENTITY % chapters SYSTEM "includes.xml">
%chapters;
]>
<!-- This document was created with Syntext Serna Free. -->
<book 
xmlns="http://docbook.org/ns/docbook"
xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>UmVirt Linux From Scratch Manual</title>
  <bookinfo>
    <legalnotice>
      <para>Creative Commons Attribution 3.0 License (CC BY 3.0)</para>
    </legalnotice>
    <author>
      <personname>
        <firstname>Boris</firstname>
        <surname>Morozov</surname>
      </personname>
    </author>
<abstract>
<para>This manual covers UmVirt Linux From Scratch v.0.1 installation and confiration.</para>
<para>To get information about packages user can use ULFS packages service, source packages data.</para>
<para>To get information about Linux kernel user can use kernel documentation in source file</para>
</abstract>

  </bookinfo>
  <preface>
    <title>About</title>
<sect1>
<title>About ULFS</title>
    <para>Nowadays Open source code is suffer from huge corporations intrests and autocratic regimes politics against Internet and globalisation. At any moment access to source code repositories can become unavailable which can cause financial and existential problems to source code users.</para>
    <para>UmVirt Linux From Scratch (ULFS) is autonomous, 3E (experimental, educational, emergency) GNU/Linux distro which can be built entirely from source codes.</para>
    <para>ULFS based on instructions which described in "Linux From Scratch" (LFS) and "Beyond Linux From Scratch" (BLFS) books. Therefore in order of better understanding of what ULFS is, user can build it own distro according to LFS book and install few packages from BLFS book.</para>
    <para>ULFS contain some parts:
<itemizedlist>
<listitem><emphasis role="bold">Base GNU/Linux image</emphasis> - hard disk image or archive which contain result of GNU/Linux building according to LFS book with few imrovements which allows to use ULFS features. If user don't trust us or need custom image he or she can build base image manualy.</listitem>
<listitem><emphasis role="bold">Advanced GNU/Linux images</emphasis> - base  GNU/Linux images or archives with preinstalled software.</listitem>
<listitem><emphasis role="bold">ULFS Repository</emphasis> - physical or virtual server which store source packages which can be installed on base or advanced images.</listitem>
<listitem><emphasis role="bold">ULFS Packages Service</emphasis> - Web-service which can be used in order to on-line/off-line package installing assistance.</listitem>
</itemizedlist>
</para>
<para>Source code of all ULFS parts is open. Any user can deploy it own ULFS implentation.</para>
<para>
ULFS support have two editions:
<itemizedlist>
<listitem><emphasis role="bold">ULFS64</emphasis> - Main edition. Can be used only on amd64 architecture. Supports only 64-bit applications. Can be used as source platform for cross-compilation. </listitem>
<listitem><emphasis role="bold">ULFS32</emphasis> - Additional edition. Can be used on i686 and amd64 architecture. Supports only 32-bit applications. Derived from ULFS64 via cross-compilation. Can be used on old computers. Consume lower amount of RAM than ULFS64 but not more than 3GB.</listitem>
</itemizedlist>
</para>
</sect1>
<sect1>
<title>About this document</title>
<para>This document describe main principles of ULFS. 
To get information about packages user can use ULFS packages service, source packages data. To get information about Linux kernel user can use kernel documentation in source file.</para>
<para>Sources of this document writen in Docbook format. HTML-file or PDF-file which you reading is result of processing source file.</para>
<para>Main language of this document is American English all translations are build from main language.</para>
</sect1>
  </preface>

<part xml:id="getting-started">
<title>Getting started</title>


  <chapter>
    <title>System requirements</title>
    <para>In order to run ULFS your physical/virtual hardware have to met followed system requirements:</para>
    <table border="1">
<caption>Recomended system configuration to run ULFS</caption>      
<thead>
        <tr>
          <th>Parameter</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>CPU architecture</td>
          <td>i686/amd64 for ULFS32, amd64 for ULFS64</td>
        </tr>
        <tr>
          <td>RAM</td>
          <td>1GB per CPU</td>
        </tr>
       <tr>
          <td>SWAP</td>
          <td>RAM*2</td>
        </tr>
        <tr>
          <td>ROM</td>
          <td>25GB for main system partition, additional partition for compilation can be used</td>
        </tr>
      </tbody>
    </table>
<para>If you wish to install ULFS from archive file Optical Disk Drive (ODD) can be needed in order to load GRUB2 Rescue CD and install Master Boot Record (MBR).</para>
<para>Linux kernel is response for hardware support. If your hardware not supported out of box you can reconfigure and rebuild kernel or write your own kernel module. Using kernels from others distros is also possible.</para>
  </chapter>
  
<chapter>
    <title>User requirements</title>
 <para>In order to run ULFS you have to met followed user experiences:
<itemizedlist>
      <listitem>Popular GNU/Linux (Ubuntu, Centos) installation.</listitem>
 <listitem>Disk partitioning with fdisk, gparted, parted.</listitem>
 <listitem>Source package compilation and installation.</listitem>
 <listitem>Systemd configuration</listitem>
 <listitem>Creating distro with instructions described in "Linux From Scratch" (LFS) book</listitem>
</itemizedlist>


</para>

</chapter>

<chapter>
    <title>Base installation</title>
    <para>There are three ways to install ULFS:</para>
    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Using prebuilt image</emphasis> - Fastest way to install virtual machine. Looks like as virtual machine restore from backup.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Using prebuilt archive</emphasis> - Fast way to install on container, new partition on physical/virtual machine.</para>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Building from source code</emphasis> - Slowest way to install on any environment. Useful for high security tasks.</para>
      </listitem>
    </itemizedlist>
<para>Any of installation ways have own pros and cons. Using of specific way is depends on task definition.</para>
<sect1>
<title>Using prebuilt image</title>
<para>
If you wish to install base from prebuilt image follow next steps:
<itemizedlist>
<listitem>Download archived disk image (*.img.gz or *.qcow2.gz) .</listitem>
<listitem>Check checksum. If checksum is not valid, image is broken and download restart is needed.</listitem>
<listitem>Unpack disk image. You have to get *.img or *.qcow2 file.</listitem>
<listitem>Configure your hypervisor to run unpacked disk image (RAW image format for *.img file, QCOW2 for *.qcow2 file).</listitem>
<listitem>Run virtual machine from unpacked disk image.</listitem>
<listitem>If system loaded correctly just login as root (without password) and perform command "poweroff".</listitem>
<listitem>If you use pure LFS image you need do perform ULFS customization. See propper chapter of this manual.</listitem>
</itemizedlist>
</para>
</sect1>
<sect1>
<title>Using prebuilt archive</title>
<para>
If you wish to install base from prebuilt archive follow next steps:
<itemizedlist>
<listitem>Create empty raw virtual hard disk image or connect physical drive, logical volume, iSCSI LUN and etc. Command for 30GB raw disk image creation: 
<programlisting>qemu-img create -f raw hdd.img 30G</programlisting></listitem>

<listitem>Create partition table on disk image using fdisk, parted, gparted. For parted command should be
<programlisting>parted hdd.img</programlisting>
</listitem>
<listitem>Make system partition and make it bootable.</listitem>
<listitem>Add other partitions if needed. You can also place data partition, compilation partition and swap partition. If you using virtual machine you can use disks against partitions.</listitem>
<listitem>If you use disk image mount it to mapper via kpartx: <programlisting>kpartx -av hdd.img</programlisting></listitem>
<listitem>Format main partition on proper mouted loop (be careful if you mount mutiple loops): <programlisting>mkfs.ext4 /dev/mapper/loop0p1</programlisting></listitem>
<listitem>Make directory according to archive name ("build_dir" for "build_dir.tar.gz" archive)
<programlisting>mkdir -v build_dir</programlisting>
</listitem>
<listitem>Mount disk image partition to created directory:<programlisting>mount /dev/mapper/loop0p1 build_dir</programlisting>
</listitem>
<listitem>Extract archive to directory <programlisting>tar -xf build_dir.tar.gz</programlisting></listitem>
<listitem>Check files in directory <programlisting>ls -l build_dir</programlisting></listitem>
<listitem>Check /etc/fstab and /boot/grub files for correct root device path (/dev/vda1 - for VirtIO disk, /dev/sda1 - for SAS,SCSI,SATA,IDE). If needed correct it.</listitem>
<listitem>Go to directory with image and unmount disk image partition and mapping
<programlisting>
umount /dev/mapper/loop0p1
kpartx -dv hdd.img
</programlisting></listitem>
<listitem>Create virtual machine (We recomend to use virtual-manager for simplicity). Please use "hypervisor default" cpu model if you wish to operate ULFS32 because threre are bug in qemu on some prccessors like AMD Ryzen CPUs.</listitem>
<listitem>Connect hard disk image (hdd.img) and grub rescue cd image (grub.iso) to virtual machine, and set cdrom as boot image</listitem>
<listitem>Start a virtual machine. Grub rescue shell should apear</listitem>
<listitem>List available devices:<programlisting>ls</programlisting></listitem>
<listitem>If (hd0,1) is found, try to find vmlinuz file in this partition: List available devices<programlisting>ls (hd0,1)/boot/vmlinuz</programlisting></listitem>
<listitem>If vmlinuz file is found, try to select it for boot on virtio disk (vda1):
<programlisting>linux (hd0,1)/boot/vmlinuz root=/dev/vda1 ro</programlisting>
or on other disk (sda1)
<programlisting>linux (hd0,1)/boot/vmlinuz root=/dev/sda1 ro</programlisting>
</listitem>
<listitem>Boot the system by runnin boot command without arguments:<programlisting>boot</programlisting></listitem>
<listitem>When system is booted login as root with empty password</listitem>
<listitem>Install grub loader to MBR on virtio disk
<programlisting>grub-install /dev/vda</programlisting>
on other disk disk:
<programlisting>grub-install /dev/sda</programlisting>
</listitem>
<listitem>After instaling grub loader shoutdown a VM and try to boot it from hard drive. System shoud start automaticaly.</listitem>
</itemizedlist>
</para>
</sect1>
<sect1>
<title>Building from source code</title>
<para>To build base from source code you have to use instructions described in "Linux From Scratch" (LFS) book.</para>
<para>After following instructions from LFS book you should have bootable GNU/Linux partition.</para>
<para>After performing ULFS customiztion you have to get environment which can used to install packages via ULFS Packases service.</para>
</sect1>
  </chapter>
<chapter>
<title>Base ULFS customization</title>
<para>If you use pure LFS base you have to perform few operations to ensure ULFS support:
    <itemizedlist>
 <listitem>If libffi source package was compiled with "--with-gcc-arch=native" parameter, recompilation with parameter "--with-gcc-arch=x86-64" is required before installing packages on ULFS64. On ULFS32 recompilation with parameter "--with-gcc-arch=i686" is needed.</listitem>
 <listitem>Source package wget have to be installed.</listitem>
 <listitem>Chimp script have to be placed in /usr/bin directory</listitem>
 <listitem>File /etc/profile should like as described in BLFS. <link xlink:href="http://www.linuxfromscratch.org/blfs/view/8.3-systemd/postlfs/profile.html">http://www.linuxfromscratch.org/blfs/view/8.3-systemd/postlfs/profile.html</link>. You can have a additional directives in that file if needed.</listitem>
 <listitem>File /etc/profile.d/ulfs.sh should be created to enable ULFS functionality in LFS.

<programlisting>
cat &gt; /etc/profile.d/ulfs.sh &lt;&lt; "EOF"
export UMVIRT_ASSISTANT_URL=https://umvirt.com/linux/assistant/
export UMVIRT_PACKAGES_URL=https://umvirt.com/linux/packages/
export UMVIRT_RELEASE=0.1
EOF
</programlisting>
</listitem>
    </itemizedlist>
</para>
<para>When steps described above are committed, reboot your system and run "chimp" command without arguments. You have to get message "CHIMP IS READY TO ACCEPT COMMANDS". 
</para>

</chapter>
<chapter>
<title>ULFS Packages</title>
<para>Every GNU/Linux distro is provide software packages to install additional applications. ULFS is not exception.</para>
<para>Main purpose of "UmVirt LFS Packages" service is package installing assistance. Linux from scratch is not typical distro where binary source packages offered to user. 
LFS offers source packages without compilation automation. User have to download, unpack, configure, build and install packages manualy. 
"UmVirt LFS Packages" service is help users to install packages and all it dependaces like in other distros.</para>
<para>Information in this chapter aimed to ULFS user not ULFS Package maintainer. Information for ULFS Package maintainer can be found on ULFS Package service.</para>
<sect1>
<title>Simple packages installation</title>
<sect2>
<title>On-line mode</title>
<para>If you can use local or global ULFS Packages Service we assume that your ULFS is on on-line mode. In this case to install package you have to run "chimp" command:
<programlisting>
chimp install %package_name%
</programlisting>
</para>
<para>This command will install %package_name% sourcce package in ULFS with automatic dependancy resolving.</para>
<para>For example, to install "Midnight Commander" just run:
<programlisting>
chimp install mc
</programlisting>
</para>
</sect2>
<sect2>
<title>Off-line mode</title>
<para>If you can use offline repository located in direcrory /mnt/umvirt we assume that your ULFS in off-line mode. In this case to install package you have to run proper script in packages direcory:
<programlisting>
cd /mnt/umvirt/packages/%release%/
./%packagename%.sh
</programlisting>
</para>
<para>This command will install %package_name% sourcce package from %release% release in ULFS with automatic dependancy resolving.</para>
<para>For example, to install "Midnight Commander" from 0.1 release just run:
<programlisting>
cd /mnt/umvirt/packages/0.1/
./mc.sh            
</programlisting>
</para>

</sect2>
</sect1>
<sect1>
<title>Complex packages installation</title>
<sect2>
<title>Java subsystem</title>

<para>Java is needed to build &quot;LibreOffice&quot; source package and to run binaries like &quot;Eclipse IDE&quot;.
Due to yogurt problem installing java is not trivial. 
To install java you have to perform a few steps:
<itemizedlist>
<listitem>Install java binary with command: <programlisting>chimp add_java64</programlisting></listitem>
<listitem>Perform relogin. After relogin &quot;java&quot; command should work.</listitem>
<listitem>Build java binary from sources: <programlisting>chimp install openjdk</programlisting></listitem>
<listitem>Perform relogin. After relogin &quot;java&quot; command should work.</listitem>
<listitem>Install apache-maven: <programlisting>chimp install apache-maven</programlisting></listitem>
<listitem>Perform relogin. After relogin &quot;mvn&quot; command should work.</listitem>
<listitem>Install apache-ant: <programlisting>chimp install apache-ant</programlisting></listitem>
<listitem>Perform relogin. After relogin &quot;ant&quot; command should work.</listitem>
 </itemizedlist>
</para>
<para>At the end you have to check that commands &quot;ant&quot;, &quot;java&quot; and &quot;mvn&quot; are work.</para>
</sect2>

<sect2>
<title>LibreOffice</title>
<para>This package needs Java subsystem support and non-root user compilation.To install java you have to perform a few steps:
<itemizedlist>
<listitem>Install sudo:<programlisting>chimp install sudo</programlisting></listitem>
<listitem>Assign password for user maintainer:<programlisting>passwd maintainer</programlisting></listitem>
<listitem>Login as maintainer</listitem>
<listitem>Install libre office as maintainer:<programlisting>chimp install sudo</programlisting></listitem>
</itemizedlist>
</para>
</sect2>
<para>After instaling sudo try to install packages from maintainer to avoid permission problems.</para>

</sect1>






<sect1>
<title>Available packages list</title>
<para>To get available packages list in on-line mode you can use ULFS Packages Service: https://umvirt.com/linux/packages/%release%. </para>
<para>To get available packages list in off-line mode you can use directory /mnt/umvirt/packages/%release%/. All *.sh files represent such packages.</para>
</sect1>

<sect1>
<title>Installed packages list</title>
<para>To get available packages list you can list /var/cache/ulfs-packages directory. Each file represent such package.</para>
<para>If you delete any file in this directory it will lead to package reinstall when package placed in depenances of installing pakage.</para>
</sect1>

<sect1>
<title>Packages debug information</title>
<para>Debug information about building and installing specific package called %package% is placed in /var/log/ulfs-packages/%package% directory.</para>
<para>Timestamp files used for search installed files and can be used for profiling:</para>
<itemizedlist>
<listitem>start.time - timestamp recieved before start.</listitem>
<listitem>download.time - timestamp recieved before download.</listitem>
<listitem>[cleanup.time] - timestamp recieved before directory cleanup. Optional.</listitem>
<listitem>unpack.time - timestamp recieved before unpacking and patching</listitem>
<listitem>configure.time - timestamp recieved before configuration</listitem>
<listitem>build.time - timestamp recieved before build</listitem>
<listitem>install.time - timestamp recieved before installation</listitem>
<listitem>finish.time - timestamp recieved before finish </listitem>
</itemizedlist>
<para>files.txt - list of installed files</para>
</sect1>

<sect1>
<title>Packages building tweaks</title>
<sect2>
<title>Build directory</title>
<para>Packages are building in /sources directory. You can use this directory as mountpoint to extend disk space amount.</para>
<para>Second compilation of meson/ninja programs can lead to errors. To avoid this errors build directory should be cleared. You can place .cleanup empty file in /sources directory to delete derectory before extracting source package.</para>
</sect2>
<sect2>
<title>Multithreading</title>
<para>To speedup compilation multithreading can be used. For example, to enable building using four CPU threads write in /etc/profile this directive:<programlisting>export MAKEFLAGS="-j4"</programlisting></para>
<para>After editing /etc/profile reboot is needed for applying changes.</para>
<para>Some packages don't support multithreading. To compile this application you can use command before compilation:<programlisting>export MAKEFLAGS="-j1"</programlisting></para>
</sect2>

<sect2>
<title>Swap partition</title>
<para>Sometimes is needed to build huge source packages that require more memory than your device have. Try to use swap partition with command like:<programlisting>swapon /dev/vda2</programlisting></para>
</sect2>
</sect1>

<sect1>
<title>Known issues</title>
<para>Because development of ULFS still in progress some issues are exists. Some of them need software solution some of them needs organizational sulution.</para>
<sect2>
<title>Yogurt problem (bootstraping)</title>
<para>Yogurt is product of bacteria activity. When yogurt is making portion of bacteria can be taken from yogurt which is done.</para>
<para>Ass yogurt not all packages can be compiled with tools which supplied with ULFS, some of them need their own binaries to compile itself. This packages are:
<itemizedlist>
<listitem>Java Development Toolkit (OpenJDK)</listitem>
<listitem>Rust</listitem>
<listitem>Haskell</listitem>
</itemizedlist>
</para>
<para>Binaries are security threat bacause they can contain viruses, trojans and other malware.</para>
<para>There is way to avoid of using binaries called bootstrapping. This way is way when early versions of package can be compiled from integrated tools. Later version are can be compiled sequently.</para> 
<para>This aproach works with go compiler. Initial version compiled by gcc. Later version compiled from initial version go compiler.</para>
<para>Not all packages supports bootstrapping therefore it can't be installed in simple way.</para>
<para>You can't use this packages out of box because they break opensource conception of ULFS. On installing this packages in direct or indirect way (as dependance) you will get error. </para>
<para>If you want to install some this packages any way and understand riscs you can use supplied binaries.</para>
</sect2>
<sect2>
<title>Kernel headers (sources)</title>
<para>Device drivers, VirtialBox guest additions and some packages need kernel headers to be installed. Kernel headers is part of kernel sources. Kernel sources are not needed for runtimes and takes a disk space. To reduce size of disk images kernel sources are not included.</para>
<para>All kernel sources are placed in http://kernel.org/ website. Main kernel sources which was used during LFS base image creation can be ound in Sources.tar archive.</para>
<para>Kernel sources version shoud be equal system kernel version. You can check kernel version with uname command: <programlisting>uname -r</programlisting></para>
<para>Before installing packages which use kernel sources you have to: 
<itemizedlist>
<listitem>Extract kernel sources to /usr/src and grant access to this directory for maintainer user.</listitem>
<listitem>Correct "build" and "source" symlinks files in /lib/modules/%kerrnel_version% directory</listitem>
<listitem>Copy config file from /boot directory with name ".config". Default config file is /boot/config.</listitem>
<listitem>Prepare kernel sources for compilation. 
<para>For ULFS64: 
<programlisting>
make oldconfig
make prepare
</programlisting></para>

<para>for ULFS32:
<programlisting>
ARCH=i386 make oldconfig
ARCH=i386 make prepare
</programlisting>
</para>
</listitem>
</itemizedlist>

</para>
</sect2>

</sect1>

</chapter>

<chapter>
<title>ULFS preintalled images</title>
<para>You can use differnt preinstalled images to reduce build time. Because this images was created earlier they can contain outdated versions of kernel and packages. You can use new kernel, you can install packages again to update their versions.</para>
<para>To reduce image archive size you have to: 
<itemizedlist>
<listitem>clear /sources directory</listitem>
<listitem>create a big zero file then delete it:
<programlisting>
dd if=/dev/zero of=/zero
rm -v /zero</programlisting>
</listitem>
</itemizedlist>
</para>
<para>Also to reduce image size kernel sources and kernel firmware directories can be deleted. Kernel firmware is needed to run hardware with proprietary drivers. On early stages kernel firmware and sources are not needed.</para>
<sect1>
<title>Base image</title>
<para>This is base image recieved according to instructions from LFS book and ULFS assistant. You can create a your own base image.</para>
</sect1>

<sect1>
<title>X image</title>
<para>This is base image recieved from base image. Objective of this image is run Xorg environment and default twm desktop environment.</para>
<para>To create this image you have to run: <programlisting>chimp install X</programlisting></para>
</sect1>

<sect1>
<title>LXDE image</title>
<para>This image recieved from X image. Objective of this image is run LXDE desktop environment.</para>
<para>To create this image you have to run: <programlisting>chimp install LXDE</programlisting></para>
<para>To make LXDE main desktop manager of user create .xinitrc file in root of home folder and add:<programlisting>startlxde</programlisting></para>
</sect1>

<sect1>
<title>MATE image</title>
<para>This image recieved from X image. Objective of this image is run MATE desktop environment.</para>
<para>To create this image you have to run: <programlisting>chimp install MATE</programlisting></para>
<para>To make LXDE main desktop manager of user create .xinitrc file in root of home folder and add:<programlisting>mate-session</programlisting></para>
</sect1>

<sect1>
<title>MATE Office image</title>
<para>This image recieved from Mate image. Objective of this image is run LibreOffice in MATE desktop environment.</para>
<para>To create this image you have to: 
<itemizedlist>
<listitem>Install java subsystem</listitem>
<listitem>Install libreoffice</listitem>
<listitem>Install qt5 subsystem</listitem>
<listitem>Install gnome</listitem>
<listitem>Install inkscape</listitem>
</itemizedlist>
</para>
</sect1>

<sect1>
<title>MATE Office2 image</title>
<para>This image recieved from Mate Office image. Objective of this image is to add games and multimedia in Mate Office image.</para>
<para>To create this image you have to: 
<itemizedlist>
<listitem>Install MATE-GAMES</listitem>
<listitem>Install vlc</listitem>
<listitem>Install audacious</listitem>
</itemizedlist>
</para>
</sect1>

<sect1>
<title>MATE VP image</title>
<para>This image recieved from Mate Office2 image. Objective of this image is to run virtualization stack. This image can be used to run local ULFS repository.</para>
<para>To create this image you have to: 
<itemizedlist>
<listitem>Install mc</listitem>
<listitem>Install kernel sources and prepare it for use</listitem>
<listitem>Install lxc</listitem>
<listitem>Install qemu</listitem>
<listitem>Install virt-manager</listitem>
<listitem>Install virt-viewer</listitem>
<listitem>Install firewalld</listitem>
<listitem>Configure firewalld to use iptables as backend (in firewalld/firewald.conf)</listitem>
<listitem>Enable firewalld and libvirt (libvirt*, virt*) services which located in /usr/lib/systemd/system/</listitem>
<listitem>Install pciutils</listitem>
<listitem>Install usbutils</listitem>
</itemizedlist>
</para>
</sect1>


</chapter>


<chapter>
<title>ULFS System Configuration</title>
<para>All operations which described here are system wide and should be performed by root or user with root permissions.</para>
<sect1>
<title>Hostname</title>
<para>To edit hostname just edit /etc/hostname file and reboot.</para>
<para>To check hostname you can use hostname command.</para>
</sect1>
<sect1>
<title>Locale</title>
<para>To check available locales you can use comand: <programlisting>
locale -a
</programlisting>
</para>

<para>To check current locale you can use comand: <programlisting>
locale
</programlisting>
</para>

<para>To temporary assign locale you can use command: <programlisting>
export LANG=en_US.utf8
</programlisting>
</para>
<para>To assign locale permanently you have to add bellowed command to file /etc/profile.</para>



<para>To run application with specific locale you can assign LANG environment variable value before application name. For example to run mc with russian locale you can type: <programlisting>
LANG=ru_RU.utf8 mc
</programlisting>
</para>


</sect1>
<sect1>
<title>Network</title>
<para>To start networking link to null have to be created.</para>
<programlisting>
ln -s /dev/null /etc/systemd/network/99-default.link
</programlisting>
<para>To assign static IP-address file /etc/systemd/network/10-eth-static.network have to be created with followed contents:</para>
<programlisting>
[Match]
Name=%network-device-name%

[Network]
Address=192.168.0.2/24
Gateway=192.168.0.1
DNS=192.168.0.1
Domains=%YourDomainName%
</programlisting>
<para>To assign dynamic IP-address (DHCP) file /etc/systemd/network/10-eth-dhcp.network  have to be created with followed contents:</para>
<programlisting>
[Match]
Name=eth0

[Network]
DHCP=ipv4

[DHCP]
UseDomains=true
EOF
</programlisting>

</sect1>

<sect1>
<title>Sound</title>
<para>To get list of available sound cards aplay program from "alsa-utils" package can be used:<programlisting>aplay -L</programlisting></para>
<para>If sound cards list is empty and sound card installed, looks like current user is not member of "audio" group.</para>
<para>If user is member og group audio and sound card not listed, looks like sound card driver is not loaded or even it can be broken.</para>
<para>To get list of connected PCI devices and get infofmation about loaded kernel drivers and modules lspci command from "pciutils" package can be used:<programlisting>lspci -knn</programlisting></para>
</sect1>

<sect1>
<title>Timezone</title>
<para>Timezone information stored in files which located in /usr/share/zoneinfo directory.</para>
<para>Timezone which pointed by /etc/localtime link is current time zone. You can use ls to check link value:
<programlisting>
ls -l /etc/localtime
</programlisting>
</para>
<para>To change timezone just update /etc/localtime link:<programlisting>
ln -sf /usr/share/zoneinfo/America/Dawson_Creek /etc/localtime
</programlisting>
</para>
</sect1>


<sect1>
<title>Groups</title>
<para>Group is named list of users.</para>
<para>To create a new group "office" you can use command
<programlisting>
groupadd office
</programlisting>
</para>
<sect2>
<title>System groups</title>
<para>GNU/Linux file tree also contain files which located on virtual filesystems. This files can represent devices or contain data which recieved from kernel. To control access to this files a system groups are used:
<itemizedlist>
<listitem>audio - users who are members of this group can get access to sound cards</listitem>
<listitem>cups - users who are members of this group can get access to printers</listitem>
</itemizedlist>
</para>
<para>To get information about file-object permission, ls command can be used<programlisting>ls -l %path_to_file%</programlisting></para>


</sect2>
</sect1>

<sect1>
<title>Users</title>
<para>To create regular user called dummy type:
<programlisting>
useradd -d /home/dummy dummy
mkdir -v /home/dummy
chown dummy /home/dummy
</programlisting>
</para>
<para>
To assign password to user called dummy just type:
<programlisting>
passwd dummy</programlisting>
</para>
<para>
To add user called dummy to group sudo just type:
<programlisting>
usermod -a -G sudo dummy</programlisting>
</para>

<para>
To check user membership a id command can be used:
<programlisting>
id</programlisting>
</para>


<para>
To delete user called dummy and it homedir just type:
<programlisting>
userdel -rf dummy</programlisting>
</para>

<sect2>
<title>Home directory template</title>
<para>Home directory of new user is don't contain any folder or files. If you wish to create template for users home directory (a.k.a. skeleton directory) place it in /etc/skel directory. When you add new user pass -k parameter with folder template path.
<programlisting>
useradd -d /home/dummy -k /etc/skel dummy
</programlisting>
</para>
</sect2>

<sect2>
<title>Default users</title>
<para>ULFS can contain 3 default users:
<itemizedlist>
<listitem>root (UID:0) - root is system administrator he can perform all operations. This user is creared on LFS base image stage.</listitem>
<listitem>maintainer (UID:801) - user which should be used after sudo package installation.</listitem>
<listitem>user (UID:1000) - first user which can have UID=1000 equal to first user on all distribs. You should use this user when you working with first user data on other distribs images and partitions.</listitem>
</itemizedlist>
</para>
<para>There are also many system users which created for specific packages.</para>
</sect2>

</sect1>




<sect1>
<title>Running in real hardware</title>
<para>ULFS can run on real hardware. If needed better hardware support Linux kernel recompilation and installing drivers can be used.</para>
<para>To run ULFS on real hardware you have to 
<itemizedlist>
<listitem>create new partition</listitem>
<listitem>format new partition as ext4 filesystem</listitem>
<listitem>copy files from image with preserving all attributes
<programlisting>cp -rf --preserve=all %image_partition_mount_point%/* %new_partition_mount_point%</programlisting>
or
unpack archive with partiotion files to new partition
<programlisting>mkdir partition
mount %new_partition% partition
tar -xf partition.tar.gz
</programlisting>
</listitem>
<listitem>Edit grub.cfg and fstab files according to your new patition location.</listitem>
</itemizedlist>
</para>
<sect2>
<title>AMD Ryzen with AMD VEGA integrated graphics</title>
<para>This platform is very attractive because it provide CPU and GPU in one chip. This platform is suitable for office and home.</para>
<para>This platform need kernel recompilation (to support USB-devices and GPU), updating LLVM, libdrmm and mesa packages, installing xf86-vide-amdgpu package which also installs Linux kernel firmware.</para>
<para>If system boots with problems, there are few ways to fix it:
<itemizedlist>
<listitem>"nomodeset" kernel boot flag can be used in grub.cfg to avoid problems with AMD GPU.</listitem>
<listitem>if keyboard don't works, you can use other kernel, build new or use virtualization.</listitem>
<listitem>glxinfo from mesa-demos package can show information about OpenGL driver.</listitem>
<listitem>after installing video drivers, benchmarks can be used to check system stability and performance.</listitem>
</itemizedlist>
</para>
</sect2>
</sect1>

<sect1>
<title>Running in virtual environment</title>
<para>Running ULFS in VMs need guest addition installing for specific hypervisor to get better performance and experience.</para>
<sect2>
<title>VirtualBox</title>
<para>Virtualbox is hypervisor for newbies training. VirtualBox have simple graphical user interface and simplicity. VirtualBox can run on multiple operating systems like Apple MacOS, Microsoft Windows and Linux.</para>
<para>ULFS provide VirtualBox OVA-packages especialy for Virtualbox users. They can be used to deploy demo virtual machines of desktop and local repository. Desktop OVA-package contain VirtualBox additions.</para>
<para>Regular images don't contain VirtualBox guest additions and not ready to run.</para>
<para>To prepare disk images to run in Virtual Box it should be converted from raw or qcow format to vdi format. You can use qemu-img tool to conver image to vdi-format:<programlisting>qemu-img convert -O vdi hdd.img hdd.vdi</programlisting></para>
<para>To install virtualbox guest additions you have to do:
<itemizedlist>
<listitem>Install and prepare kernel sources for modules compilation</listitem>
<listitem>Install Virtualbox additions from guest additions disk. Just run "VBoxLinuxAdditions.run" file from Guest additions CD.</listitem>
<listitem>Reboot the virtual machine</listitem>
<listitem>Check guest additions status: <programlisting>
rcvboaxadd status</programlisting></listitem>
</itemizedlist>
</para>
<para>Warning: VirtialBox is not suport VirtIO disk drive therefore grub and fstab should be configured to use sda1 as root partition not vda1.</para>
<para>There are bug with kernel which affect additional resolution modes support by Xorg. To fix this bug "nosplash" and "nomodeset" kernel boot options should be used in /boot/grub/grub.cfg.</para>
</sect2>
<sect2>
<title>QEMU</title>
<para>QEMU is hypervosor for work and development. It's more powerfull and flexible than Virtual Box.</para>
<para>For better performance QEMU provide paravirtualization drivers for disks and network interfaces called VirtIO. As video card QEMU can USE QXL-video card</para>
<para>Also QEMU provide opensource VDI protocol called SPICE. With SPICE it's possible to work with VM remotely looks like it was launched localy.</para>
<para>VirtIO support is provided by kernel, QXL-support provided by kernel and "xf86-video-qxl" package, SPICE-support provided by kernel and "spice-vdagent" package.</para>
<para>"spice-vdagent" package is not installed by default, because it useless when QEMU hypervisor is not used. Install this package if needed.</para>
</sect2>



</sect1>
</chapter>
</part>

<part xml:id="basics">
<title>ULFS basics</title>
&basics.ssh;
&basics.http;
&basics.db;
&basics.proxy;
</part>

</book>
